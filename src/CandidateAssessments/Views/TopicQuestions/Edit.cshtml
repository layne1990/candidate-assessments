@model CandidateAssessments.Models.TopicQuestion
@using CandidateAssessments.Models
@using System.ComponentModel.DataAnnotations;
@{
    ViewData["Title"] = "Edit";
}

<script src="~/js/site.min.js"></script>

<h2>Edit</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>TopicQuestion</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.TopicQuestionId)
        @Html.HiddenFor(model => model.TimesAnswered)
        @Html.HiddenFor(model => model.ASelected)
        @Html.HiddenFor(model => model.BSelected)
        @Html.HiddenFor(model => model.CSelected)
        @Html.HiddenFor(model => model.DSelected)


        <div class="form-group">
            @Html.LabelFor(model => model.QuestionType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    var e = Model.QuestionType;
                    var attributes = (DisplayAttribute[])e.GetType().GetField(e.ToString()).GetCustomAttributes(typeof(DisplayAttribute), false);
                    var disp = attributes.Length > 0 ? attributes[0].Name : string.Empty;
                }
                @Html.HiddenFor(model => model.QuestionType)
                <div class="form-control" style="border-color:white"> @disp</div>
                @Html.ValidationMessageFor(model => model.QuestionType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Topic, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (ViewBag.TopicId != null)
                {
                    List<Topic> TList = ViewBag.TopicList;
                    int tid = ViewBag.TopicId;

                    @Html.Hidden("TopicId", tid);
                    <lable>@TList.SingleOrDefault(x => x.TopicId == tid).Name</lable>

                }
                else {
                    @Html.DropDownListFor((model => model.TopicId), new SelectList(ViewBag.TopicList, "TopicId", "Name"), new { htmlAttributes = new { @class = "form-control" } })
                }
                @Html.ValidationMessageFor(model => model.TopicId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBoxFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.QuestionText, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QuestionText, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QuestionText, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.QuestionType == QuestionTypes.TrueFalse)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.CorrectAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    <label>@Html.RadioButtonFor(m => m.CorrectAnswer, "A", new { htmlAttributes = new { @class = "form-control", @name = "correctAnswer" } }) True</label>
                    <label>@Html.RadioButtonFor(m => m.CorrectAnswer, "B", new { htmlAttributes = new { @class = "form-control", @name = "correctAnswer" } }) False</label>
                    @Html.ValidationMessageFor(model => model.CorrectAnswer, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else if (Model.QuestionType == QuestionTypes.MultipleChoice)
        {
            
         
                <div class="form-group">
                    @Html.LabelFor(model => model.CorrectAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        <label>@Html.RadioButtonFor(m => m.CorrectAnswer, "A", new { htmlAttributes = new { @class = "form-control", @name = "correctAnswer" } }) A</label>
                        <label>@Html.RadioButtonFor(m => m.CorrectAnswer, "B", new { htmlAttributes = new { @class = "form-control", @name = "correctAnswer" } }) B</label>
                        <label>@Html.RadioButtonFor(m => m.CorrectAnswer, "C", new { htmlAttributes = new { @class = "form-control", @name = "correctAnswer" } }) C</label>
                        <label>@Html.RadioButtonFor(m => m.CorrectAnswer, "D", new { htmlAttributes = new { @class = "form-control", @name = "correctAnswer" } }) D</label>
                        @Html.ValidationMessageFor(model => model.CorrectAnswer, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ChoiceA, htmlAttributes: new { @class = "control-label col-md-2", @id = "trueLabel" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ChoiceA, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ChoiceA, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ChoiceB, htmlAttributes: new { @class = "control-label col-md-2", @id = "falseLabel" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ChoiceB, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ChoiceB, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ChoiceC, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ChoiceC, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ChoiceC, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ChoiceD, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ChoiceD, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ChoiceD, "", new { @class = "text-danger" })
                    </div>
                </div>




        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.CorrectAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CorrectAnswer, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CorrectAnswer, "", new { @class = "text-danger" })
                </div>
            </div>

        }
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
                    }

<div>
    @Html.ActionLink("Back to List", "Index", new { TopicId = Model.TopicId })
</div>


